{
  "name": "My workflow 9",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        160,
        -32
      ],
      "id": "b19c4076-85e6-41e2-abe8-eb7258f46013",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "url": "",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        384,
        -32
      ],
      "id": "aac29caf-c33a-4482-8afe-de4b6a5d1730",
      "name": "Fetch Crypto News"
    },
    {
      "parameters": {
        "jsCode": "const articles = items[0].json.articles || [];\nconst topArticles = articles.slice(0, 5); // Get top 5 articles\n\nlet formatted = topArticles.map((article, index) => {\n  return `${index + 1}. ${article.title}\\n🔗 ${article.url}\\n📰 Source: ${article.source.name}\\n`;\n}).join('\\n');\n\nreturn [\n  {\n    json: {\n      headlines: formatted\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        -32
      ],
      "id": "3b38b041-2cca-4ef8-9178-fa73605c7789",
      "name": "Format Top Headlines"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.headlines }}",
        "messages": {
          "messageValues": [
            {
              "message": "=You are a crypto news analyst.\n\nYour job:\n1. Read the provided crypto news content.\n2. Summarize it in 2–3 lines.\n3. Classify its sentiment as: Bullish, Bearish, or Neutral.\n\nReturn strictly in this JSON format:\n{\n  \"Summary\": \"...\",\n  \"Sentiment\": \"Bullish / Bearish / Neutral\"\n}\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        832,
        -32
      ],
      "id": "6d5f79e5-f316-4e04-bd81-edbc51f68df3",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        928,
        192
      ],
      "id": "5c582afd-d83e-489a-9e0b-0a9a2bf565b9",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "ws4YI9XXClINRUrl",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.text;\n\n// Remove markdown code fences\nconst clean = text.replace(/```json\\n?|```/g, '').trim();\n\n// Match the first JSON object only\nconst match = clean.match(/\\{[\\s\\S]*?\\}/);\nif (!match) {\n  throw new Error(\"No valid JSON object found in AI output\");\n}\n\nlet parsed;\ntry {\n  parsed = JSON.parse(match[0]);\n} catch (err) {\n  throw new Error(\"Failed to parse JSON: \" + err.message);\n}\n\nreturn [\n  {\n    json: parsed\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        -32
      ],
      "id": "43affcff-9f39-4a18-8e78-69218c1ba830",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "https://cryptopanic.com/api/v1/posts/?auth_token=95f6bc94a762fe63db60b9e889181acca8bed405&filter=trending",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1456,
        -32
      ],
      "id": "0573e947-0d6c-4972-89f3-e911c9a64eda",
      "name": "Fetch Trending Crypto News"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1904,
        -32
      ],
      "id": "67056ae5-e4c1-4634-931b-7ff90d8717e2",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an AI that analyzes crypto news articles.\n\nBelow is a news article:\n\n---\nTitle: {{ $json.title }}\nDescription: {{ $json.description }}\n\nTasks:\n1. Give a short summary in plain language.\n2. Tell the overall sentiment (positive, negative, or neutral).\n3. If the article is important, say “🔥 HOT NEWS” else say “📄 Regular”.\n\nFormat your response like this:\nSummary: your summary here\nSentiment: Positive/Negative/Neutral\nTag: 🔥 HOT NEWS or 📄 Regular\n",
        "needsFallback": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        2128,
        -32
      ],
      "id": "e063c2cd-0e0d-43b9-8576-0e98b6123a61",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2160,
        192
      ],
      "id": "35a312a3-5583-460f-b70c-b8290c730419",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "ws4YI9XXClINRUrl",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  const text = item.json.output || \"\";\n\n  const summary = text.match(/Summary:\\s*(.*)/)?.[1]?.trim() ?? \"\";\n  const sentiment = text.match(/Sentiment:\\s*(.*)/)?.[1]?.trim() ?? \"\";\n  const tag = text.match(/Tag:\\s*(.*)/)?.[1]?.trim() ?? \"\";\n\n  return {\n    json: {\n      title: item.json.title,\n      description: item.json.description,\n      published_at: item.json.published_at,\n      summary,\n      sentiment,\n      tag\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2528,
        -32
      ],
      "id": "08a526ce-7568-40c9-9640-f3082a61c7fd",
      "name": "Parse Gemini Output"
    },
    {
      "parameters": {
        "fieldToSplitOut": "results",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1680,
        -32
      ],
      "id": "e0abd873-1bbf-4ca7-b819-c4ef44b9c5ea",
      "name": "Split Out"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultName": "Crypto News Summaries",
          "cachedResultUrl": ""
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": ""
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Summary": "={{ $json.summary }}",
            "Sentiment": "={{ $json.sentiment }}",
            "tag": "={{ $json.tag }}"
          },
          "matchingColumns": [
            "Summary"
          ],
          "schema": [
            {
              "id": "Summary",
              "displayName": "Summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Sentiment",
              "displayName": "Sentiment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "tag",
              "displayName": "tag",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2752,
        -32
      ],
      "id": "b91505cd-23ba-4070-80af-1dc489b606cd",
      "name": "Append or update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "D6wlKW3aY5AtukiN",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Crypto News",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Crypto News": {
      "main": [
        [
          {
            "node": "Format Top Headlines",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Top Headlines": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Fetch Trending Crypto News",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Trending Crypto News": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Parse Gemini Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Gemini Output": {
      "main": [
        [
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "82394972-ce8b-4563-9f65-91aa7a251f6e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": ""
  },
  "id": "vwCZZgj4CCVJNakV",
  "tags": []
}